% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/bayesNMF.R
\name{bayesNMF}
\alias{bayesNMF}
\title{Bayesian Non-Negative Matrix Factorization}
\usage{
bayesNMF(
  M,
  rank,
  learn_rank_method = "BFI",
  sparse_rank = TRUE,
  likelihood = "poisson",
  prior = "truncnormal",
  fast = (likelihood == "poisson" & prior \%in\% c("truncnormal", "exponential")),
  inits = NULL,
  fixed = NULL,
  clip = 0.4,
  prior_parameters = NULL,
  recovery = FALSE,
  recovery_priors = "cosmic",
  file = paste0("nmf_", likelihood, "_", prior),
  true_P = NULL,
  convergence_control = new_convergence_control(maxiters = ifelse(recovery, 5000,
    2000)),
  store_logs = TRUE,
  overwrite = FALSE
)
}
\arguments{
\item{M}{matrix, data with samples as columns and features as rows}

\item{rank}{integer or vector, number of latent factors, integers
(e.g., \code{rank = 5}) or vector (e.g., \code{rank = 1:5}) are accepted.
If a vector is provided, values must be sequential and start at 0 or 1
(e.g., \code{1:5} or \code{0:5}) for \code{learn_rank_method = "BFI"}, but can be
nonsequential (e.g., \code{c(2,4,5)}) for \code{learn_rank_method = "heuristic"}.}

\item{learn_rank_method}{string, method used to learn latent rank, used if
a vector is provided for \code{rank}, one of c("BFI","heuristic") is used.
Bayesian Factor Inclusion (BFI) learns rank automatically as a part of the
Bayesian model with a binary Factor inclusion matrix. The heuristic approach
runs a fixed-rank Bayesian NMF for each value in \code{rank}, and selects
the model that minimizes BIC.}

\item{likelihood}{string, one of \code{c('normal','poisson')}, represents the
distribution used for likelihood f(M|P, E).}

\item{prior}{string, one of \code{c('truncnormal','exponential','gamma')}, represents
the distribution used for priors on P and E.}

\item{fast}{boolean, if \code{bast = TRUE}, \code{likelihood = 'poisson'},
and \code{fast = TRUE}, then updates from the corresponding
\code{likelihood = 'normal'} model are used as proposals
in an efficient Gibb's sampler. Only available for \code{likelihood = 'poisson'}
and \code{prior = c('truncnormal', 'exponential')}. Defaults \code{TRUE} when possible.}

\item{inits}{(optional) list, initial values for P and E (may also provide
sigmasq if \code{likelihood = "normal"} and/or A if \code{rank} is a vector).}

\item{fixed}{(optional) list, parameters values to fix at constant
values, rather than learning them through Gibbs updates.}

\item{clip}{numeric, if \code{rank} is a vector and \code{learn_rank_method = "BFI"},
 prior probabilities of factor inclusion will be clipped by
\code{clip}/N away from 0 and 1.}

\item{prior_parameters}{(optional) list, specification of prior parameters.}

\item{recovery}{boolean, if TRUE, additional factors are included with priors
at previously discovered factors. In this case, \code{rank} denotes the number of
additional latent factors on top of those with priors in \code{recovery_priors}.}

\item{recovery_priors}{"cosmic" or list, prior parameters for recovered
latent factors. If \code{recovery_priors = "cosmic"}, pre-computed priors
based on the 79 COSMIC signatures are used.}

\item{file}{string, file name (without extension) used for log, rds,
and pdf files created by this function.}

\item{true_P}{(optional) matrix, reference latent factors matrix P to
compare estimated factors to with a heatmap.}

\item{convergence_control}{list, specification of convergence parameters.
See documentation for \code{new_convergence_control}.}

\item{store_logs}{boolean, if \code{store_logs = TRUE}, each iteration of the
Gibb's sampler is stored in resulting \code{.rds} file. Otherwise, only MAP is
saved.}

\item{overwrite}{boolean, if \code{overwrite = TRUE}, the log, safe, and plot files of
previous runs with the same \code{file} will be overwritten}
}
\value{
list
}
\description{
Bayesian Non-Negative Matrix Factorization.
}
